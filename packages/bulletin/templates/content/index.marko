import hierarchyAliases from "@base-cms/marko-web/utils/hierarchy-aliases";
import contentLatestIssueWithContentLoader from "../../loaders/content-latest-issue-with-content";

import { getAsArray, getAsObject, get } from "@base-cms/object-path";
import isActiveLink from "@base-cms/marko-web-theme-default/components/site-navbar/utils/is-active-link";
import { asArray } from "@base-cms/utils";

$ const { site, req, apollo } = out.global;
$ const { id, type, pageNode } = data;
$ const issuePromise = contentLatestIssueWithContentLoader(apollo, { contentId: id });

$ const displayPrimaryImage = ["whitepaper", "media-gallery", "video", "event"].includes(type) ? false : true;
$ const displayPublishedDate = ["event", "webinar", "company", "contact"].includes(type) ? false : true;
$ const displayFeatured = ["company", "product", "contact"].includes(type) ? false : true;
$ const displayInquiry = (content) => {
  if (type === "company" && get(content, "enableRmi")) return true;
  if (get(content, "company.enableRmi")) return true;
  return false;
}
$ const displayCompanyImage = ["product", "press-release"].includes(type) ? true : false;
$ const displaySocialShare = ["contact"].includes(type) ? false : true;
$ const displayPhotoswipe = ["contact"].includes(type) ? false : true;

$ const displayCompanyHeader = (content) => {
  const company = get(content, "company");
  if (get(content, "company")) return true;
  return false;
}

<marko-web-content-page-layout id=id type=type>
  <@head>
    <marko-web-gtm-content-context|{ context }| id=id>
      <marko-web-gtm-push data=context />
    </marko-web-gtm-content-context>
    <marko-web-gam-targeting key-values={ cont_id: id, cont_type: type } />
    <marko-web-resolve-page|{ data: content }| node=pageNode>
      $ const aliases = hierarchyAliases(content.primarySection);
      <marko-web-gam-slots slots=adSlots({ aliases }) />
    </marko-web-resolve-page>
  </@head>

  <@page>

    <marko-web-resolve-page|{ data: content, resolved }| node=pageNode>
      $ const aliases = hierarchyAliases(content.primarySection);
      <marko-web-page-wrapper>
        <@section>
          <div class="row">
            <default-theme-page-contents|{ blockName }|
              class="col-lg-8 mb-3 mb-lg-0"
              modifiers=[type]
              attrs={ "data-gallery-id": id }
            >
              <marko-web-element name="content-header" block-name=blockName>
                <div class="page-wrapper__published">
                  Published:
                  <marko-web-content-published tag="span" obj=content />
                </div>
                <hr class="page-wrapper__above-title">
                <marko-web-content-name tag="h1" class="page-wrapper__title" obj=content />
                <marko-web-content-teaser tag="p" class="page-wrapper__deck" obj=content />
                <default-theme-content-attribution obj=content />
                <hr>
              </marko-web-element>
              $ const isLogo = get(content, "primaryImage.isLogo");
              <if(isLogo || type === "contact")>
                <marko-web-page-image
                  obj=content.primaryImage
                  modifiers=(type === "contact" ? [] : ["primary-image-inline"])
                  fluid=false
                  width=250
                />
              </if>
              <else>
                <marko-web-page-image
                  obj=content.primaryImage
                  modifiers=["fluid-16by9"]
                  options={ w: 700, h: 394, fit: "crop" }
                />
              </else>

              $ const bodyId = `content-body-${id}`;
              <marko-web-content-body block-name=blockName obj=content attrs={ id: bodyId } />
              <marko-web-content-sidebars block-name=blockName obj=content />
            </default-theme-page-contents>

            <aside class="col-lg-4 page-rail">
              <marko-web-resolve|{ resolved }| promise=issuePromise>
                $ const { issue, issueContent } = resolved;
                <shared-content-list-flow
                  nodes=issueContent.nodes.slice(0,3)
                  inner-justified=false
                  flush-x=false
                  flush-y=false
                >
                  <@header>More Articles</@header>
                  <@node with-dates=false with-teaser=false display-image=false with-attribution=false with-section=false>
                  <@title modifiers=["small"] />
                  </@node>
                </shared-content-list-flow>
                <bulletin-magazine-latest-issue-node card=true flush=false card=false node=issue />
              </marko-web-resolve>
            </aside>
          </div>
        </@section>
        <@section>
          <marko-web-resolve|{ resolved }| promise=issuePromise>
            $ const { issue, issueContent } = resolved;
            <hr />
            <div class="page-wrapper__title--issue-name">More from ${issue.name}</div>
            <hr class="page-wrapper__above-title">
            <default-theme-card-deck-flow cols=3 nodes=issueContent.nodes.slice(3)>
              <@slot|{ node, index }|>
                <shared-content-card-node node=node with-section=false with-attribution=false />
              </@slot>
            </default-theme-card-deck-flow>
          </marko-web-resolve>
        </@section>

      </marko-web-page-wrapper>
    </marko-web-resolve-page>
  </@page>
</marko-web-content-page-layout>
